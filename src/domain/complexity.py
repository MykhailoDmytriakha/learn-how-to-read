from __future__ import annotations

# Support both package contexts:
# 1) When imported as `src.domain.complexity` (tests, package execution)
# 2) When imported as `domain.complexity` (running `streamlit run src/app.py`)
try:  # context: src.domain
    from ..text_complexity_children_optimized import (
        calculate_children_text_complexity_optimized,
        compare_algorithms_children_vs_original,
        get_children_complexity_breakdown,
    )
    from ..text_complexity_improved import calculate_text_complexity_improved
    from ..text_complexity_improved import get_complexity_breakdown as get_complexity_breakdown_improved
except Exception:  # context: domain
    from text_complexity_children_optimized import (  # type: ignore
        calculate_children_text_complexity_optimized,
        compare_algorithms_children_vs_original,
        get_children_complexity_breakdown,
    )
    from text_complexity_improved import calculate_text_complexity_improved  # type: ignore
    from text_complexity_improved import get_complexity_breakdown as get_complexity_breakdown_improved  # type: ignore[no-redef]


def get_age_thresholds_info(age: int) -> str:
    """Return formatted threshold information for the given age"""
    thresholds: dict[int, str] = {
        6: "‚úÖ 0-20: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 20-30: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 30-40: –°–ª–æ–∂–Ω–æ | ‚ùå 40+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
        7: "‚úÖ 0-25: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 25-35: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 35-45: –°–ª–æ–∂–Ω–æ | ‚ùå 45+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
        8: "‚úÖ 0-25: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 25-35: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 35-45: –°–ª–æ–∂–Ω–æ | ‚ùå 45+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
        9: "‚úÖ 0-30: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 30-40: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 40-50: –°–ª–æ–∂–Ω–æ | ‚ùå 50+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
        10: "‚úÖ 0-30: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 30-40: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 40-50: –°–ª–æ–∂–Ω–æ | ‚ùå 50+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
        11: "‚úÖ 0-30: –ò–¥–µ–∞–ª—å–Ω–æ | üëç 30-40: –•–æ—Ä–æ—à–æ | ‚ö†Ô∏è 40-50: –°–ª–æ–∂–Ω–æ | ‚ùå 50+: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ",
    }
    return thresholds.get(age, thresholds[8])


def get_complexity_emoji(complexity: float | int, age: int) -> str:
    """Return emoji based on complexity score and age"""
    if age <= 6:
        if complexity <= 20:
            return "‚úÖ"
        elif complexity <= 30:
            return "üëç"
        elif complexity <= 40:
            return "‚ö†Ô∏è"
        else:
            return "‚ùå"
    elif age <= 8:
        if complexity <= 25:
            return "‚úÖ"
        elif complexity <= 35:
            return "üëç"
        elif complexity <= 45:
            return "‚ö†Ô∏è"
        else:
            return "‚ùå"
    else:  # 9+
        if complexity <= 30:
            return "‚úÖ"
        elif complexity <= 40:
            return "üëç"
        elif complexity <= 50:
            return "‚ö†Ô∏è"
        else:
            return "‚ùå"


def calculate_text_complexity_universal(
    text: str,
    age: int = 8,
    include_cognitive_load: bool = True,
    use_children_algorithm: bool = True,
) -> int:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ (6-11 –ª–µ—Ç)
        include_cognitive_load: –£—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        use_children_algorithm: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –¥–µ—Ç—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º

    Returns:
        –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    """
    if use_children_algorithm:
        return calculate_children_text_complexity_optimized(text, age=age, include_cognitive_load=include_cognitive_load)
    else:
        return calculate_text_complexity_improved(text, age=age, include_cognitive_load=include_cognitive_load)


def get_complexity_breakdown_universal(
    text: str,
    age: int = 8,
    include_cognitive_load: bool = True,
    use_children_algorithm: bool = True,
) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    if use_children_algorithm:
        return get_children_complexity_breakdown(text, age=age, include_cognitive_load=include_cognitive_load)
    else:
        return get_complexity_breakdown_improved(text, age=age, include_cognitive_load=include_cognitive_load)


__all__ = [
    "get_age_thresholds_info",
    "get_complexity_emoji",
    "calculate_text_complexity_universal",
    "get_complexity_breakdown_universal",
    "compare_algorithms_children_vs_original",
]
